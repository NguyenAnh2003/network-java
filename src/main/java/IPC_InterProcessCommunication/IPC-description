# two types of processes
    Independent process
    Co-operating process

+ Independent is not affected by the execution of other processes.
+ Co-operating one can be affected by other executing processes.

# In reality, there are many situations when co-operative nature can be utilized for increasing
    - computational speed
    - modularity

-> Inter-process communication (IPC) - a mechanism that allows processes to communicate with each
other and synchronize their actions. Processes can communicate with others through:
    - Shared memory
    - Message passing

# Shared memory
    + Shared memory requires processes to share some variable
        - Supposing p1 and p2 are executing simultaneously, sharing resources || use some info from
    another one.
        - P1 generates info about certain computations or resources being used and keeps it
    as a record in shared memory
        - P2 needs to use shared info, it will check in the record stored in shared memory and take
    note of the info generated by P1 and act

    !Processes use shared memory for extracting info as record from another process as well as
    for delivering any specific info to other processes

# Producer-Consumer problem
2 versions of this problem
    - The first one is known as the unbounded buffer in which Producer can keep on producing
    items and there is no limit on the size of the buffer
    - 2nd one is known as the bounded buffer problem in which the Producer can produce up to
    a certain number of items before waiting for Consumer.
+ Producer and the Consumer will share some common memory -> Producer start producing
+ Consumer will first check for the availability.
    - if not -> waiting for producing items

# Message passing
    !Send message through communication link, exchanging messages
    - send(message, destination) || send(message)
    - receive(message, host) || receive(message)
    The message size can be of fixed size || variable size
    The standard message have 2 parts: header & body

    The header: storing message type, destination id, src id, message length
    Control info: contains info like what to do if runs out of buffer space, sequence number,
    priority
    # Message is sent using FIFO

    @Questions?
    How are links established?
    Can a link be associated with more than two processes?
    How many links can there be between every pair of communicating processes?
    What is the capacity of a link? Is the size of a message that the link can accommodate fixed or variable?
    Is a link unidirectional or bi-directional?

    # Communication link
    - A link has some capacity determining the number of messages that can reside in it
    - Each has a queue
    - In zero capacity, the sender waits until the receiver
        informs the sender that it has received the message
    ## Direct and Indirect
    Direct: implemented when the processes use a specific process identifier! for the communication
    In-direct: done via shared mailbox. consisting of a queue of messages. Sender
    keeps the message in mailbox and the receiver picks them up

    # Exchanging messages
    ## Synchronous and Asynchronous message passing
    - a process is blocked that is waiting for some event, such as resource becoming available
    or the completion of an I/O operation.
    - The process may or may not be blocked while sending a message or attempting to receive
    a message so message passing may be blocking || non-blocking

    - Blocking is considered !synchronous and Blocking send means the sender will be blocked
    until the message is received
    - Non-blocking ~ asynchronous

    - Sender naturally to be non-blocking, b.c after message passing as there may be a need to
    send the message to different processes.
    # The sender expects acknowledgement from the receiver in case the send fails

    !Non-blocking send and Blocking receive (Mostly used)

# Reference
https://www.geeksforgeeks.org/inter-process-communication-ipc/
